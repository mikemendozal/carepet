{"ast":null,"code":"import { global } from './global.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ServiceService = /*#__PURE__*/(() => {\n  class ServiceService {\n    constructor(_http) {\n      this._http = _http;\n      this._services = [];\n      this.url = global.url;\n    }\n    get getService() {\n      return [...this._services];\n    }\n    set setService(service) {\n      this._services.push(service);\n    }\n    //METODOS PARA EL CRUD DE SERVICE\n    searchService(filtro) {\n      return this._http.get(this.url + 'searchService/' + filtro);\n    }\n    removeService(serviceid) {\n      return this._http.delete(this.url + 'deleteService/' + serviceid);\n    }\n    updateService(serviceId, serviceDescription, serviceName, serviceStateId, servicePrice) {\n      return this._http.put(this.url + 'updateService/' + serviceId, {\n        serviceId,\n        serviceDescription,\n        serviceName,\n        serviceStateId,\n        servicePrice\n      });\n    }\n    updateServiceQualification(qualification, id) {\n      console.log(`datos del metodo ${qualification}   ${id}`);\n      return this._http.patch(this.url + 'updateServiceQualification/' + id, qualification);\n    }\n    listServices() {\n      return this._http.get(this.url + 'listService');\n    }\n    saveServices(serviceDescription, serviceName, servicePrice, serviceStateId) {\n      return this._http.post(this.url + 'saveService', {\n        serviceDescription,\n        serviceName,\n        servicePrice,\n        serviceStateId\n      });\n    }\n    PurchaseServices(product, purcharsePrice, purcharseType) {\n      return this._http.post(this.url + 'registerPurcharse', {\n        product,\n        purcharsePrice,\n        purcharseType\n      });\n    }\n    PurchaseServices2(service, purcharsePrice, purcharseType) {\n      return this._http.post(this.url + 'registerPurcharse', {\n        service,\n        purcharsePrice,\n        purcharseType\n      });\n    }\n    static #_ = this.ɵfac = function ServiceService_Factory(t) {\n      return new (t || ServiceService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ServiceService,\n      factory: ServiceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ServiceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}